name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline lors d'un push sur la branche 'main'
  pull_request:
    branches:
      - main  # Déclenche le pipeline lors d'une demande de tirage sur la branche 'main'
  workflow_dispatch:  # Déclenchement manuel du workflow via GitHub

jobs:
  build:
    runs-on: ubuntu-latest  # Utilisation de l'image Ubuntu pour le job

    steps:
      # Étape 1 : Récupérer le code depuis le dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Java
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Distribution Java (Eclipse Temurin)
          java-version: '21'

      # Étape 3 : Construire le projet avec Maven
      - name: Build with Maven
        run: mvn clean install

      # Étape 4 : Exécuter les tests unitaires
      - name: Run unit tests
        run: mvn test

  docker:
    runs-on: ubuntu-latest
    needs: build  # Ce job dépend du job "build"
    steps:
      # Étape 5 : Vérifier et démarrer Docker
      - name: Check Docker status
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version  # Vérifie que Docker fonctionne correctement

      # Étape 6 : Se connecter à Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Étape 7 : Tirer (pull) l'image Docker depuis Docker Hub
      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/my-java-app:latest

      # Étape 8 : Exécuter l'application à partir de l'image Docker
      - name: Run Docker container
        run: docker run -d ${{ secrets.DOCKER_USERNAME }}/my-java-app:latest

  notify:
    runs-on: ubuntu-latest
    needs: [build, docker]  # Ce job dépend des jobs "build" et "docker"
    steps:
      # Étape 9 : Notifier du statut du déploiement
      - name: Notify deployment status
        if: always()  # Toujours exécuter cette étape, même en cas d'échec
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
          fi
