name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline lors d'un push sur la branche 'main'
  pull_request:
    branches:
      - main  # Déclenche le pipeline lors d'une demande de tirage sur la branche 'main'
  workflow_dispatch:  # Déclenchement manuel du workflow via GitHub

jobs:
  build:
    runs-on: ubuntu-latest  # Utilisation de l'image Ubuntu pour le job

    steps:
      # Étape 1 : Récupérer le code depuis le dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Java (si vous utilisez Java)
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'

      # Étape 3 : Construire le projet avec Maven
      - name: Build with Maven
        run: mvn clean install

      # Étape 4 : Exécuter les tests unitaires
      - name: Run unit tests
        run: mvn test

      # Étape 5 : Vérifier si Docker est en cours d'exécution
      - name: Check Docker status
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version  # Vérifie que Docker fonctionne correctement

      # Étape 6 : Créer l'image Docker
      - name: Build Docker image
        run: docker build -t my-java-app .

      # Étape 7 : Push de l'image Docker dans le Docker Hub
      - name: Push Docker image
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push my-java-app

      # Étape 8 : Provisionner l'environnement avec Terraform (si nécessaire)
      - name: Provision environment
        run: terraform apply

      # Étape 9 : Déployer l'application dans l'environnement cible avec Docker
      - name: Deploy application
        run: docker run -d my-java-app

      # Étape 10 : Configurer les métriques Prometheus pour le monitoring
      - name: Set up Prometheus metrics
        run: docker-compose -f prometheus.yml up

      # Étape 11 : Analyser la qualité du code avec SonarQube (si nécessaire)
      - name: Analyze with SonarQube
        run: mvn sonar:sonar -Dsonar.host.url=http://your-sonarqube-server

      # Étape 12 : Notifier du statut du déploiement
      - name: Notify deployment status
        run: echo "Deployment successful!"
